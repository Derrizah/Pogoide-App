

class EventStartSettings extends BaseSettings{
    constructor(id) {
        super(id);
    }

    asDict() {
        return {
            /* Android Only Properties */
            channelId: soundName ? 'sound-channel-id' : 'default-channel-id',
            ticker: 'My Notification Ticker', // (optional)
            autoCancel: this.autoCancel, // (optional) default: true
            largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
            smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
            subText: 'This is a subText', // (optional) default: none
            color: 'red', // (optional) default: system default
            vibrate: this.vibrate, // (optional) default: true
            vibration: this.vibration, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: 'some_tag', // (optional) add tag to message
            group: 'group', // (optional) add group to message
            groupSummary: this.groupSummary, // (optional) set this notification to be the group summary for a group of notifications, default: false
            ongoing: this.ongoing, // (optional) set whether this is an "ongoing" notification
            actions: this.actions, // (Android only) See the doc for notification actions to know more
            invokeApp: this.invokeApp, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

            when: this.when, // (optionnal) Add a timestamp pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
            usesChronometer: this.usesChronometer, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
            timeoutAfter: this.timeoutAfter, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

            /* iOS only properties */
            category: this.category, // (optional) default: empty string

            /* iOS and Android properties */
            id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: 'Local Notification', // (optional)
            message: 'My Notification Message', // (required)
            userInfo: {screen: 'home'}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: !!soundName, // (optional) default: true
            soundName: soundName ? soundName : 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            number: this.number, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        }
    }
}

class BaseSettings {
    constructor(id) {
        this.Id = id;

        // From the original code
        this.autoCancel = true;
        this.vibrate = true;
        this.vibration = 300;
        this.groupSummary = false;
        this.ongoing = false;
        this.actions = ['Yes', 'No'];
        this.invokeApp = true;
        this.when = null;
        this.usesChronometer = false;
        this.timeoutAfter = null;
        this.category = '';
        this.number = 10;

    }
}
